Map.centerObject(a)
//去云函数
function cloudfree_landsat (image){
  // Bit 0 - Fill
  // Bit 1 - Dilated Cloud
  // Bit 2 - Unused
  // Bit 3 - Cloud
  // Bit 4 - Cloud Shadow
  var qaMask = image.select('QA_PIXEL').bitwiseAnd(parseInt('11111', 2)).eq(0);
  var saturationMask = image.select('QA_RADSAT').eq(0);

  // Apply the scaling factors to the appropriate bands.
  var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);
  var thermalBand = image.select('ST_B6').multiply(0.00341802).add(149.0);

  // Replace the original bands with the scaled ones and apply the masks.
  return image.addBands(opticalBands, null, true)
      .addBands(thermalBand, null, true)
      .updateMask(qaMask)
      .updateMask(saturationMask);

}
var dr0 = ee.DateRange('2010-06-01','2011-09-25');
var dr1 = ee.DateRange('2009-06-01','2010-09-25');
var dr2 = ee.DateRange('2011-06-01','2012-09-25');
var dr3 = ee.DateRange('2020-12-01','2021-02-25');
var dr4 = ee.DateRange('2019-12-02','2020-02-25');
var DateRG = ee.List([dr0])
print(DateRG);
/*
var Sdate = ee.Date('2015-01-01');//Start date
var Edate = ee.Date('2020-12-31');//End date
var DateRG = ee.List.sequence(0,Edate.difference(Sdate,'year'),2)//generate the date sequence list
					.map(function(n){return Sdate.advance(n,'year')})
						.map(function(i){return ee.Date(i).getRange('year')});
print(DateRG,'DateRG');

*/

//jisuan mndwi
function cal_mndwi(image){ return image.normalizedDifference(["SR_B2",'SR_B4']).rename('mndwi')}
//daoru yingxiang
var rencentIMG = L5.filterDate('2009-04-01','2011-6-30').filter(ee.Filter.calendarRange(4,6,"month")).filterBounds(a).map(cloudfree_landsat).median().clip(a);
var rencentIMG1 =L5.filterDate('2009-04-01','2011-6-30').filter(ee.Filter.calendarRange(4,6,"month")).filterBounds(a);
print(rencentIMG1);
//yanmo qudiao shuiti
var WaterMask = cal_mndwi(ee.Image(rencentIMG)).lt(0.1);
function GetIMG(dr){
  var rawIMG = ee.Image();
  //shuju shaixuan daoru landsat 5 (shiaxuan shijian)
  var srIMG1 = L5.filterDate('2009-04-01','2011-6-30').filter(ee.Filter.calendarRange(4,6,"month")).filterBounds(a).map(cloudfree_landsat)
  // yanmo shiyong qianbian jisaunde mndwi
  var srIMG = srIMG1.median().clip(a).updateMask(WaterMask);
  //guiyihua
  function sts_minmax (image){
    var minmax = image.reduceRegion({
    reducer: ee.Reducer.minMax(),
    geometry:a,
    scale: 30,
    tileScale:8,
    maxPixels: 1e11}).values();
    return minmax;}
    // daoru  lst jisuan hanshu  bing fanhui LSTboduan
  function getLST(dr){
    var LandsatLST = require('users/lengshaijie/LST:Landsat_LSTL5');
    var satellite = 'L5';
    var date_start = '2022-01-02';
    var date_end = '2023-03-28';
    var use_ndvi =true;
    // get landsat collection with added variables: NDVI, FVC, TPW, EM, LST
    var LandsatColl = LandsatLST.collection(satellite, date_start, date_end,a, use_ndvi).select('LST')
                                .clip(a).updateMask(WaterMask);
    var  minMax = sts_minmax(LandsatColl);
    var LST = LandsatColl.unitScale(minMax.get(1),minMax.get(0));
    return LST}
    //jisuan ndvi
  function getNDVI(dr){
     //boduanjisuan
    var rawNDVI = srIMG.normalizedDifference(['SR_B4', 'SR_B3']).rename('ndvi');
    //guiyihua
    var minMax = sts_minmax(rawNDVI);
    var NDVI = rawNDVI.unitScale(minMax.get(1),minMax.get(0));
    return NDVI}
  function getWET(dr){
    var rawWET = srIMG.select(0).multiply(0.0315)
              .add(srIMG.select(1).multiply(0.2021))
              .add(srIMG.select(2).multiply(0.3102))
              .add(srIMG.select(3).multiply(0.1594))
              .add(srIMG.select(4).multiply(-0.6806))
              .add(srIMG.select(5).multiply(-0.6109))
              .multiply(0.0001).rename('wet');
    var minMax = sts_minmax(rawWET);
    var WET = rawWET.unitScale(minMax.get(1),minMax.get(0));
    return WET}
  function getNDBSI(dr){
    var swir1 = srIMG.select(4);
    var red = srIMG.select(2);
    var nir1 = srIMG.select(3);
    var blue = srIMG.select(0);
    var green = srIMG.select(1);
    var bi = swir1.add(red).subtract(nir1.add(blue)).divide(swir1.add(red).add(nir1.add(blue)));
    var ibi = swir1.multiply(2).divide(swir1.add(nir1)).subtract(nir1.divide(nir1.add(red)).add(green.divide(green.add(swir1))))
                  .divide(swir1.multiply(2).divide(swir1.add(nir1)).add(nir1.divide(nir1.add(red)).add(green.divide(green.add(swir1)))));
    var rawNDBSI = bi.add(ibi).divide(2).rename('ndbsi');
    var minMax = sts_minmax(rawNDBSI);
    var NDBSI = rawNDBSI.unitScale(minMax.get(1),minMax.get(0));
    return NDBSI}
    print("1");
    Export.image.toDrive({ 
        image:rawIMG.addBands(getLST(dr))
                .addBands(getNDVI(dr))
                .addBands(getWET(dr))
                .addBands(getNDBSI(dr)).slice(1,5), 
        region: a, 
        scale: 30, 
        crs: "EPSG:4326", 
        maxPixels: 1e13 
      }); 
  return rawIMG.addBands(getLST(dr))
                .addBands(getNDVI(dr))
                .addBands(getWET(dr))
                .addBands(getNDBSI(dr)).slice(1,5)
 

}
                
var IndexCol = DateRG.map(GetIMG);
print(IndexCol,'IndexCol');

function pca_model(image){
  var scale = 30;
  var bandNames = image.bandNames();
  var region = a;
  var meanDict = image.reduceRegion({
    reducer: ee.Reducer.mean(),
    geometry:region,
    scale: scale,
    tileScale:8,
    maxPixels: 1e11});
  var means = ee.Image.constant(meanDict.values(bandNames));
  var centered = image.subtract(means);
  var getNewBandNames = function(prefix) {
  var seq = ee.List.sequence(1, bandNames.length());
  return seq.map(function(b) {
    return ee.String(prefix).cat(ee.Number(b).int());
  })};
  var arrays = centered.toArray();
  var covar = arrays.reduceRegion({
    reducer: ee.Reducer.centeredCovariance(),
    geometry: region,
    scale: scale,
    maxPixels: 1e13
  });
  var covarArray = ee.Array(covar.get('array'));
  var eigens = covarArray.eigen();
  var eigenValues = eigens.slice(1, 0, 1);
  var eigenVectors = eigens.slice(1, 1);
  var arrayImage = arrays.toArray(1);
  var principalComponents = ee.Image(eigenVectors).matrixMultiply(arrayImage);
  var sdImage = ee.Image(eigenValues.sqrt())
    .arrayProject([0]).arrayFlatten([getNewBandNames('sd')]);
  return principalComponents
    .arrayProject([0])
    .arrayFlatten([getNewBandNames('pc')])
    .divide(sdImage);
}
var PCA1_result = ee.ImageCollection(IndexCol).map(pca_model).select(0);
//print(PCA1_result);


function normlizedPCA1(image){
  function sts_minmax (image){
    var minmax = image.reduceRegion({
    reducer: ee.Reducer.minMax(),
    geometry:a,
    scale: 30,
    maxPixels: 1e11}).values();
    return minmax;}
  var minMax = sts_minmax(image);
  return image.unitScale(minMax.get(1),minMax.get(0)).rename('rsei')}
var RSEI = PCA1_result.map(normlizedPCA1);
//print(RSEI);

//part1计算特征值

function pca_modeleigenValues(k){
  var image =  ee.Image(k)
  var scale = 30;
  var bandNames = image.bandNames();
  var region = a;
  var meanDict = image.reduceRegion({
    reducer: ee.Reducer.mean(),
    geometry:region,
    scale: scale,
    maxPixels: 1e11
  });
  var means = ee.Image.constant(meanDict.values(bandNames));
  var centered = image.subtract(means);
  var getNewBandNames = function(prefix) {
  var seq = ee.List.sequence(1, bandNames.length());
  return seq.map(function(b) {
    return ee.String(prefix).cat(ee.Number(b).int());
  })};
  var arrays = centered.toArray();
  var covar = arrays.reduceRegion({
    reducer: ee.Reducer.centeredCovariance(),
    geometry: region,
    scale: scale,
    maxPixels: 1e11
  });
  var covarArray = ee.Array(covar.get('array'));
  var eigens = covarArray.eigen();
  var eigenValues = eigens.slice(1, 0, 1);
  return eigenValues}
var s_eigenValues = IndexCol.map(pca_modeleigenValues)

print(s_eigenValues,'eigenValues')

/*
var DateRG_start = DateRG.map(function (dr){return ee.DateRange(dr).start()});
var zipRSEI = RSEI.toList(DateRG.length()).zip(DateRG_start);
function setSystime(image){
  var systime = ee.Date(ee.List(image).get(1)).advance(6,'month');
  return ee.Image(ee.List(image).get(0)).set('system:time_start',systime)}

var stimeRSEI = zipRSEI.map(setSystime);
Map.addLayer(ee.Image(stimeRSEI.get(4)),{min:0,max:1,palette:mypalette},'rsei');

//print(stimeRSEI,'stimeRSEI')
var options = {
  width: 400,
  height: 240,
  legend: {position: 'top', textStyle: {color: 'blue', fontSize: 16}},
  lineWidth: 1,
  pointSize: 5, 
  vAxis:{
    title: RSEI
  },
  trendlines: {
    0: {
      type: 'linear',
      color: 'red',
      lineWidth: 1,
      opacity: 0.8,
      showR2: true,
      visibleInLegend: true
    }},
  title: 'Timeserise RSEI',

};

var RSEImean = ui.Chart.image.seriesByRegion({
  imageCollection:stimeRSEI,
  regions:a,
  reducer: ee.Reducer.mean(),
  scale: 30,
  seriesProperty: "RSEI"
}).setOptions(options);
print(RSEImean,'RSEImean');
*/
/*
function exportImageCollection(imgCol) { 
  var indexList = imgCol.reduceColumns(ee.Reducer.toList(), ["system:index"]) 
                        .get("list"); 
  indexList.evaluate(function(indexs) { 
    for (var i=0; i<indexs.length; i++) { 
      var image = imgCol.filter(ee.Filter.eq("system:index", indexs[i])).first(); 
      image = image.clip(a)
      Export.image.toDrive({ 
        image: image, 
        description: indexs[i], 
        fileNamePrefix: indexs[i], 
        region: a, 
        scale: 30, 
        crs: "EPSG:4326", 
        maxPixels: 1e13 
      }); 
    } 
  }); 
} 

exportImageCollection(IndexCol);*/
/*
var im1 = IndexCol.select(0);
Export.image.toDrive({ 
        image: im1, 
        region: a, 
        scale: 30, 
        crs: "EPSG:4326", 
        maxPixels: 1e13 
      }); 
  */
